datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String   
  name          String
  projects      Project[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  likes Like[]
  comments Comment[]
}

model Project {
  id        String   @id @default(cuid())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  title     String
  synopsis  String?
  visibility Visibility @default(PRIVATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapters  Chapter[]
  likes Like[]
  comments Comment[]

  @@index([ownerId])
}

model Chapter {
  id          String        @id @default(cuid())
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  index       Int
  title       String
  contentJson Json?
  contentHtml String?       @db.Text
  contentText String?       @db.Text
  plainText   String?       @db.Text
  status      ChapterStatus @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  likes     Like[]
  comments  Comment[]

  @@unique([projectId, index])
  @@index([projectId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  projectId String?
  chapterId String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chapter Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId], map: "unique_user_project_like")
  @@unique([userId, chapterId], map: "unique_user_chapter_like")
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  projectId String?
  chapterId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  chapter Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@map("comments")
  @@index([projectId])
  @@index([chapterId])
}

enum Visibility {
  PRIVATE
  PUBLIC
}

enum ChapterStatus {
  DRAFT
  PUBLISHED
}